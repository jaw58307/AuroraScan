# protocols.py

protocols_dict = {
    1: 'TCP Port Service Multiplexer (TCPMUX)',
    3: 'CompressNET Management Utility',
    4: 'CompressNET Compression Process',
    5: 'Remote Job Entry (RJE)',
    7: 'Echo Protocol',
    9: 'Discard Protocol',
    11: 'Active Users (SYSTAT)',
    13: 'Daytime Protocol',
    17: 'Quote of the Day (QOTD)',
    18: 'Message Send Protocol (MSP)',
    19: 'Character Generator (CHARGEN)',
    20: 'FTP Data Transfer',
    21: 'FTP Control (Command)',
    22: 'SSH (Secure Shell)',
    23: 'Telnet Protocol',
    25: 'Simple Mail Transfer Protocol (SMTP)',
    37: 'Time Protocol',
    39: 'Resource Location Protocol (RLP)',
    42: 'Host Name Server (Nameserv)',
    43: 'Whois Protocol',
    49: 'TACACS Login Host Protocol',
    50: 'Remote Mail Checking Protocol (RMCP)',
    53: 'DNS (Domain Name System)',
    67: 'Bootstrap Protocol (BOOTP) server / DHCP',
    68: 'Bootstrap Protocol (BOOTP) client / DHCP',
    69: 'Trivial File Transfer Protocol (TFTP)',
    70: 'Gopher Protocol',
    79: 'Finger Protocol',
    80: 'HTTP (Hypertext Transfer Protocol)',
    88: 'Kerberos Authentication System',
    101: 'NIC Host Name Server',
    107: 'Remote TELNET Service',
    109: 'POP2 (Post Office Protocol version 2)',
    110: 'POP3 (Post Office Protocol version 3)',
    111: 'ONC RPC (Open Network Computing Remote Procedure Call)',
    113: 'Ident Protocol',
    115: 'Simple File Transfer Protocol (SFTP)',
    119: 'Network News Transfer Protocol (NNTP)',
    123: 'Network Time Protocol (NTP)',
    135: 'Microsoft EPMAP (End Point Mapper)',
    137: 'NetBIOS Name Service',
    138: 'NetBIOS Datagram Service',
    139: 'NetBIOS Session Service',
    143: 'IMAP (Internet Message Access Protocol)',
    161: 'Simple Network Management Protocol (SNMP)',
    162: 'SNMP Trap',
    179: 'Border Gateway Protocol (BGP)',
    194: 'Internet Relay Chat (IRC)',
    201: 'AppleTalk Routing Maintenance',
    204: 'AppleTalk Echo Protocol',
    213: 'IPX',
    220: 'Internet Mail Access Protocol (IMAP) - Version 3',
    389: 'Lightweight Directory Access Protocol (LDAP)',
    427: 'Service Location Protocol (SLP)',
    443: 'HTTPS (Hypertext Transfer Protocol Secure)',
    445: 'Microsoft-DS (Active Directory, Windows shares)',
    465: 'URL Rendezvous Directory for SSM',
    514: 'Syslog Protocol',
    515: 'Line Printer Daemon (LPD)',
    520: 'Routing Information Protocol (RIP)',
    521: 'Routing Information Protocol Next Generation (RIPng)',
    525: 'Timed Protocol',
    530: 'Remote Procedure Call (RPC)',
    548: 'Apple Filing Protocol (AFP)',
    554: 'Real Time Streaming Protocol (RTSP)',
    563: 'NNTP over SSL',
    587: 'Simple Mail Transfer Protocol (SMTP) over SSL',
    631: 'Internet Printing Protocol (IPP)',
    636: 'LDAP over SSL',
    993: 'IMAP over SSL',
    995: 'POP3 over SSL',
    1080: 'SOCKS Proxy',
    1194: 'OpenVPN',
    1433: 'Microsoft SQL Server (MS SQL)',
    1521: 'Oracle Database',
    1701: 'Layer 2 Tunneling Protocol (L2TP)',
    1723: 'Point-to-Point Tunneling Protocol (PPTP)',
    1812: 'RADIUS Authentication Protocol',
    1813: 'RADIUS Accounting Protocol',
    1883: 'MQTT (Message Queuing Telemetry Transport)',
    2049: 'Network File System (NFS)',
    2083: 'cPanel over SSL',
    2087: 'WHM over SSL',
    2096: 'cPanel Webmail over SSL',
    3306: 'MySQL Database Service',
    3389: 'Remote Desktop Protocol (RDP)',
    5000: 'Universal Plug and Play (UPnP)',
    5432: 'PostgreSQL Database Service',
    5631: 'pcAnywhere Data',
    5632: 'pcAnywhere Control',
    5900: 'Virtual Network Computing (VNC)',
    6379: 'Redis Database',
    8080: 'HTTP Proxy',
    8443: 'HTTPS Alternative',
    9000: 'SonarQube',
    9090: 'Prometheus',
    9200: 'Elasticsearch',
    11211: 'Memcached',
    27017: 'MongoDB',
}

def get_protocol_name(port):
    """
    Fetch the protocol name based on the port number.
    :param port: Port number
    :return: Protocol name as string
    """
    return protocols_dict.get(port, "Unknown Protocol")